name: Main

on:
  pull_request:

jobs:
  prepare-diff:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: diff-changes
        with:
          filters: |
            app:
              - apps/codeimage/**
              - package.json
              - pnpm-lock.json
            libs:
              - packages/**
              - package.json
              - pnpm-lock.json
            backend:
              - 'packages/prisma-models/**'
              - 'apps/api/**'
              - package.json
              - pnpm-lock.json
    outputs:
      backend-change: ${{steps.filter.outputs.backend}}
      app-change: ${{steps.filter.outputs.app}}
      libs-change: ${{steps.filter.outputs.libs-change}}

  install:
    needs: prepare-diff
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [ 16.13.2 ]
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install

  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install

      - name: Prisma migrate
        run: |
          cd apps/api
          pnpm exec prisma generate
          pnpm --filter=@codeimage/prisma-models build

      - name: Lint
        run: pnpm lint

  build-packages:
    name: Build packages
    needs: [install, prepare-diff]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install

      - name: Prisma migrate
        run: |
          cd apps/api
          pnpm exec prisma generate
          pnpm --filter=@codeimage/prisma-models build

      - name: Build packages
        run: |
          pnpm libs:build

      - name: Cache packages
        uses: actions/cache@v3
        with:
          path: packages
          key: packages-${{ github.run_id }}
          restore-keys: packages-

  build-app:
    name: Build App
    needs: [build-packages, prepare-diff]
    if: (${{ needs.prepare-diff.outputs.app-change == 'true' }} || ${{ needs.prepare-diff.outputs.libs-change == 'true' }})
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Restore dist
        uses: actions/cache@v3
        with:
          path: packages
          key: packages-${{ github.run_id }}

      - name: ls test
        run: |
          cd packages/ui
          ls

      - name: Install dependencies
        run: pnpm install

      - name: Build app
        run: |
          pnpm --filter=@codeimage/app build




  build-api:
    if: ${{ needs.prepare-diff.outputs.backend-change == 'true' }}
    name: Build Api
    needs: [install, prepare-diff]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install

      - name: Prisma migrate
        run: |
          cd apps/api
          pnpm exec prisma generate
          pnpm --filter=@codeimage/prisma-models build

      - name: Build
        run: |
          pnpm --filter=@codeimage/api build:ts


  typecheck-app:
    if: (${{ needs.prepare-diff.outputs.app-change == 'true' }} || ${{ needs.prepare-diff.outputs.libs-change == 'true' }})
    name: Typecheck app
    needs: [build-packages, prepare-diff]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install

      - name: Restore dist
        uses: actions/cache@v3
        with:
          path: |
            packages
          key: packages-${{ github.run_id }}

      - name: Typecheck packages
        run: |
          pnpm --filter='@codeimage/app' typecheck


  typecheck-packages:
    if: ${{ needs.prepare-diff.outputs.libs-change == 'true' }}
    name: Typecheck packages
    needs: [build-packages, prepare-diff]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install

      - name: Restore dist
        uses: actions/cache@v3
        with:
          path: |
            packages
          key: packages-${{ github.run_id }}

      - name: Typecheck packages
        run: |
          pnpm --filter='./packages/**' --recursive --parallel typecheck


  be-test:
    if: ${{ needs.prepare-diff.outputs.backend-change == 'true' }}
    name: Api test
    needs: [install, prepare-diff]
    runs-on: ubuntu-latest

    services:
      postgres:
        # Docker Hub image
        image: postgres:13-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps TCP port 5432 on service container to the host
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ga_codeimage?schema=${{ github.ref_name }}

    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Restore dist
        uses: actions/cache@v3
        with:
          path: |
            packages
          key: packages-${{ github.run_id }}

      - name: Install dependencies
        run: pnpm install

      - name: Prisma migrate
        run: |
          cd apps/api
          pnpm exec prisma migrate deploy
          pnpm exec prisma generate
          pnpm --filter=@codeimage/prisma-models build

      - name: Test
        run: pnpm --filter=@codeimage/api test

  deploy-next:
    # Next branch only
    if: github.ref == 'refs/heads/next'
    name: Deploy next
    needs: [ build-app, build-api, typecheck-packages, typecheck-app, be-test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Execute tests
        run: exit 0

  deploy-prod:
    # Next branch only
    if: github.ref == 'refs/heads/main'
    name: Deploy prod
    needs: [ lint, build-app, build-api, typecheck-packages, typecheck-app, be-test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Execute tests
        run: exit 0

concurrency:
  group: main-${{ github.head_ref }}
  cancel-in-progress: true
