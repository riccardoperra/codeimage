diff --git a/dist/source/select/select-base.jsx b/dist/source/select/select-base.jsx
index 13b1a5d51904310f77f6d5559b86b7744535696b..aded8a31c2491d669d0048fa9afd3048a16b9263 100644
--- a/dist/source/select/select-base.jsx
+++ b/dist/source/select/select-base.jsx
@@ -5,226 +5,257 @@
  * Credits to the React Spectrum team:
  * https://github.com/adobe/react-spectrum/blob/5c1920e50d4b2b80c826ca91aff55c97350bf9f9/packages/@react-aria/select/src/useSelect.ts
  */
-import { access, createGenerateId, focusWithoutScrolling, mergeDefaultProps, } from "@kobalte/utils";
-import { createMemo, createSignal, createUniqueId, splitProps, } from "solid-js";
-import { createFormControl, FORM_CONTROL_PROP_NAMES, FormControlContext } from "../form-control";
-import { createCollator } from "../i18n";
-import { createListState, ListKeyboardDelegate } from "../list";
-import { Polymorphic } from "../polymorphic";
-import { PopperRoot } from "../popper";
-import { createDisclosureState, createFormResetListener, createPresence, createRegisterId, } from "../primitives";
-import { Selection, } from "../selection";
-import { SelectContext } from "./select-context";
+import {
+  access,
+  createGenerateId,
+  focusWithoutScrolling,
+  mergeDefaultProps,
+} from '@kobalte/utils';
+import {createMemo, createSignal, createUniqueId, splitProps} from 'solid-js';
+import {
+  createFormControl,
+  FORM_CONTROL_PROP_NAMES,
+  FormControlContext,
+} from '../form-control';
+import {createCollator} from '../i18n';
+import {createListState, ListKeyboardDelegate} from '../list';
+import {Polymorphic} from '../polymorphic';
+import {PopperRoot} from '../popper';
+import {
+  createDisclosureState,
+  createFormResetListener,
+  createPresence,
+  createRegisterId,
+} from '../primitives';
+import {Selection} from '../selection';
+import {SelectContext} from './select-context';
 /**
  * Base component for a select, provide context for its children.
  * Used to build single and multi-select.
  */
 export function SelectBase(props) {
-    const defaultId = `select-${createUniqueId()}`;
-    props = mergeDefaultProps({
-        id: defaultId,
-        selectionMode: "single",
-        allowDuplicateSelectionEvents: true,
-        disallowEmptySelection: props.selectionMode !== "multiple",
-        gutter: 8,
-        sameWidth: true,
-        isModal: false,
-    }, props);
-    const [local, popperProps, formControlProps, others] = splitProps(props, [
-        "valueComponent",
-        "itemComponent",
-        "sectionComponent",
-        "isOpen",
-        "defaultIsOpen",
-        "onOpenChange",
-        "value",
-        "defaultValue",
-        "onValueChange",
-        "placeholder",
-        "options",
-        "optionValue",
-        "optionTextValue",
-        "optionDisabled",
-        "optionGroupChildren",
-        "isOptionGroup",
-        "keyboardDelegate",
-        "allowDuplicateSelectionEvents",
-        "disallowEmptySelection",
-        "selectionBehavior",
-        "selectionMode",
-        "isVirtualized",
-        "isModal",
-        "forceMount",
-    ], [
-        "getAnchorRect",
-        "placement",
-        "gutter",
-        "shift",
-        "flip",
-        "slide",
-        "overlap",
-        "sameWidth",
-        "fitViewport",
-        "hideWhenDetached",
-        "detachedPadding",
-        "arrowPadding",
-        "overflowPadding",
-    ], FORM_CONTROL_PROP_NAMES);
-    const [triggerId, setTriggerId] = createSignal();
-    const [valueId, setValueId] = createSignal();
-    const [listboxId, setListboxId] = createSignal();
-    const [triggerRef, setTriggerRef] = createSignal();
-    const [contentRef, setContentRef] = createSignal();
-    const [listboxRef, setListboxRef] = createSignal();
-    const [listboxAriaLabelledBy, setListboxAriaLabelledBy] = createSignal();
-    const [focusStrategy, setFocusStrategy] = createSignal(true);
-    const disclosureState = createDisclosureState({
-        isOpen: () => local.isOpen,
-        defaultIsOpen: () => local.defaultIsOpen,
-        onOpenChange: isOpen => local.onOpenChange?.(isOpen),
+  const defaultId = `select-${createUniqueId()}`;
+  props = mergeDefaultProps(
+    {
+      id: defaultId,
+      selectionMode: 'single',
+      allowDuplicateSelectionEvents: true,
+      disallowEmptySelection: props.selectionMode !== 'multiple',
+      gutter: 8,
+      sameWidth: true,
+      isModal: false,
+    },
+    props,
+  );
+  const [local, popperProps, formControlProps, others] = splitProps(
+    props,
+    [
+      'valueComponent',
+      'itemComponent',
+      'sectionComponent',
+      'isOpen',
+      'defaultIsOpen',
+      'onOpenChange',
+      'value',
+      'defaultValue',
+      'onValueChange',
+      'placeholder',
+      'options',
+      'optionValue',
+      'optionTextValue',
+      'optionDisabled',
+      'optionGroupChildren',
+      'isOptionGroup',
+      'keyboardDelegate',
+      'allowDuplicateSelectionEvents',
+      'disallowEmptySelection',
+      'selectionBehavior',
+      'selectionMode',
+      'isVirtualized',
+      'isModal',
+      'forceMount',
+    ],
+    [
+      'getAnchorRect',
+      'placement',
+      'gutter',
+      'shift',
+      'flip',
+      'slide',
+      'overlap',
+      'sameWidth',
+      'fitViewport',
+      'hideWhenDetached',
+      'detachedPadding',
+      'arrowPadding',
+      'overflowPadding',
+    ],
+    FORM_CONTROL_PROP_NAMES,
+  );
+  const [triggerId, setTriggerId] = createSignal();
+  const [valueId, setValueId] = createSignal();
+  const [listboxId, setListboxId] = createSignal();
+  const [triggerRef, setTriggerRef] = createSignal();
+  const [contentRef, setContentRef] = createSignal();
+  const [listboxRef, setListboxRef] = createSignal();
+  const [listboxAriaLabelledBy, setListboxAriaLabelledBy] = createSignal();
+  const [focusStrategy, setFocusStrategy] = createSignal(true);
+  const disclosureState = createDisclosureState({
+    isOpen: () => local.isOpen,
+    defaultIsOpen: () => local.defaultIsOpen,
+    onOpenChange: isOpen => local.onOpenChange?.(isOpen),
+  });
+  const contentPresence = createPresence(
+    () => local.forceMount || disclosureState.isOpen(),
+  );
+  const focusListbox = () => {
+    const listboxEl = listboxRef();
+    if (listboxEl) {
+      focusWithoutScrolling(listboxEl);
+    }
+  };
+  const open = focusStrategy => {
+    // Don't open if the collection is empty.
+    if (listState.collection().getSize() <= 0) {
+      return;
+    }
+    setFocusStrategy(focusStrategy);
+    disclosureState.open();
+    let focusedKey = listState.selectionManager().firstSelectedKey();
+    if (focusedKey == null) {
+      if (focusStrategy === 'first') {
+        focusedKey = listState.collection().getFirstKey();
+      } else if (focusStrategy === 'last') {
+        focusedKey = listState.collection().getLastKey();
+      }
+    }
+    focusListbox();
+    listState.selectionManager().setFocused(true);
+    listState.selectionManager().setFocusedKey(focusedKey);
+  };
+  const close = () => {
+    disclosureState.close();
+    listState.selectionManager().setFocused(false);
+    listState.selectionManager().setFocusedKey(undefined);
+  };
+  const toggle = focusStrategy => {
+    if (disclosureState.isOpen()) {
+      close();
+    } else {
+      open(focusStrategy);
+    }
+  };
+  const listState = createListState({
+    selectedKeys: () => local.value,
+    defaultSelectedKeys: () => local.defaultValue,
+    onSelectionChange: keys => {
+      local.onValueChange?.(keys);
+      if (local.selectionMode === 'single') {
+        close();
+      }
+    },
+    allowDuplicateSelectionEvents: () =>
+      access(local.allowDuplicateSelectionEvents),
+    disallowEmptySelection: () => access(local.disallowEmptySelection),
+    selectionBehavior: () => access(local.selectionBehavior),
+    selectionMode: () => local.selectionMode,
+    dataSource: () => local.options ?? [],
+    getKey: () => local.optionValue,
+    getTextValue: () => local.optionTextValue,
+    getIsDisabled: () => local.optionDisabled,
+    getSectionChildren: () => local.optionGroupChildren,
+    getIsSection: () => local.isOptionGroup,
+  });
+  const {formControlContext} = createFormControl(formControlProps);
+  createFormResetListener(triggerRef, () => {
+    listState
+      .selectionManager()
+      .setSelectedKeys(local.defaultValue ?? new Selection());
+  });
+  const collator = createCollator({usage: 'search', sensitivity: 'base'});
+  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
+  // When virtualized, the layout object will be passed in as a prop and override this.
+  const delegate = createMemo(() => {
+    const keyboardDelegate = access(local.keyboardDelegate);
+    if (keyboardDelegate) {
+      return keyboardDelegate;
+    }
+    return new ListKeyboardDelegate(listState.collection, undefined, collator);
+  });
+  const selectedItems = createMemo(() => {
+    return [...listState.selectionManager().selectedKeys()]
+      .map(key => listState.collection().getItem(key))
+      .filter(Boolean);
+  });
+  const renderValue = () => {
+    return local.valueComponent?.({
+      get items() {
+        return selectedItems();
+      },
+      remove: item => listState.selectionManager().toggleSelection(item.key),
+      clear: () => listState.selectionManager().clearSelection(),
     });
-    const contentPresence = createPresence(() => local.forceMount || disclosureState.isOpen());
-    const focusTrigger = () => {
-        const triggerEl = triggerRef();
-        if (triggerEl) {
-            focusWithoutScrolling(triggerEl);
-        }
-    };
-    const focusListbox = () => {
-        const listboxEl = listboxRef();
-        if (listboxEl) {
-            focusWithoutScrolling(listboxEl);
-        }
-    };
-    const open = (focusStrategy) => {
-        // Don't open if the collection is empty.
-        if (listState.collection().getSize() <= 0) {
-            return;
-        }
-        setFocusStrategy(focusStrategy);
-        disclosureState.open();
-        let focusedKey = listState.selectionManager().firstSelectedKey();
-        if (focusedKey == null) {
-            if (focusStrategy === "first") {
-                focusedKey = listState.collection().getFirstKey();
-            }
-            else if (focusStrategy === "last") {
-                focusedKey = listState.collection().getLastKey();
-            }
-        }
-        focusListbox();
-        listState.selectionManager().setFocused(true);
-        listState.selectionManager().setFocusedKey(focusedKey);
-    };
-    const close = () => {
-        disclosureState.close();
-        listState.selectionManager().setFocused(false);
-        listState.selectionManager().setFocusedKey(undefined);
-        focusTrigger();
-    };
-    const toggle = (focusStrategy) => {
-        if (disclosureState.isOpen()) {
-            close();
-        }
-        else {
-            open(focusStrategy);
-        }
-    };
-    const listState = createListState({
-        selectedKeys: () => local.value,
-        defaultSelectedKeys: () => local.defaultValue,
-        onSelectionChange: keys => {
-            local.onValueChange?.(keys);
-            if (local.selectionMode === "single") {
-                close();
-            }
-        },
-        allowDuplicateSelectionEvents: () => access(local.allowDuplicateSelectionEvents),
-        disallowEmptySelection: () => access(local.disallowEmptySelection),
-        selectionBehavior: () => access(local.selectionBehavior),
-        selectionMode: () => local.selectionMode,
-        dataSource: () => local.options ?? [],
-        getKey: () => local.optionValue,
-        getTextValue: () => local.optionTextValue,
-        getIsDisabled: () => local.optionDisabled,
-        getSectionChildren: () => local.optionGroupChildren,
-        getIsSection: () => local.isOptionGroup,
-    });
-    const { formControlContext } = createFormControl(formControlProps);
-    createFormResetListener(triggerRef, () => {
-        listState.selectionManager().setSelectedKeys(local.defaultValue ?? new Selection());
-    });
-    const collator = createCollator({ usage: "search", sensitivity: "base" });
-    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
-    // When virtualized, the layout object will be passed in as a prop and override this.
-    const delegate = createMemo(() => {
-        const keyboardDelegate = access(local.keyboardDelegate);
-        if (keyboardDelegate) {
-            return keyboardDelegate;
-        }
-        return new ListKeyboardDelegate(listState.collection, undefined, collator);
-    });
-    const selectedItems = createMemo(() => {
-        return [...listState.selectionManager().selectedKeys()]
-            .map(key => listState.collection().getItem(key))
-            .filter(Boolean);
-    });
-    const renderValue = () => {
-        return local.valueComponent?.({
-            get items() {
-                return selectedItems();
-            },
-            remove: item => listState.selectionManager().toggleSelection(item.key),
-            clear: () => listState.selectionManager().clearSelection(),
-        });
-    };
-    const renderItem = (item) => {
-        return local.itemComponent?.({ item });
-    };
-    const renderSection = (section) => {
-        return local.sectionComponent?.({ section });
-    };
-    const dataset = createMemo(() => ({
-        "data-expanded": disclosureState.isOpen() ? "" : undefined,
-        "data-closed": !disclosureState.isOpen() ? "" : undefined,
-    }));
-    const context = {
-        dataset,
-        isOpen: disclosureState.isOpen,
-        isDisabled: () => formControlContext.isDisabled() ?? false,
-        isMultiple: () => access(local.selectionMode) === "multiple",
-        isVirtualized: () => local.isVirtualized,
-        isModal: () => local.isModal ?? false,
-        contentPresence,
-        autoFocus: focusStrategy,
-        triggerRef,
-        listState: () => listState,
-        keyboardDelegate: delegate,
-        triggerId,
-        valueId,
-        listboxId,
-        listboxAriaLabelledBy,
-        setListboxAriaLabelledBy,
-        setTriggerRef,
-        setContentRef,
-        setListboxRef,
-        open,
-        close,
-        toggle,
-        placeholder: () => local.placeholder,
-        renderValue,
-        renderItem,
-        renderSection,
-        generateId: createGenerateId(() => access(formControlProps.id)),
-        registerTriggerId: createRegisterId(setTriggerId),
-        registerValueId: createRegisterId(setValueId),
-        registerListboxId: createRegisterId(setListboxId),
-    };
-    return (<FormControlContext.Provider value={formControlContext}>
+  };
+  const renderItem = item => {
+    return local.itemComponent?.({item});
+  };
+  const renderSection = section => {
+    return local.sectionComponent?.({section});
+  };
+  const dataset = createMemo(() => ({
+    'data-expanded': disclosureState.isOpen() ? '' : undefined,
+    'data-closed': !disclosureState.isOpen() ? '' : undefined,
+  }));
+  const context = {
+    dataset,
+    isOpen: disclosureState.isOpen,
+    isDisabled: () => formControlContext.isDisabled() ?? false,
+    isMultiple: () => access(local.selectionMode) === 'multiple',
+    isVirtualized: () => local.isVirtualized,
+    isModal: () => local.isModal ?? false,
+    contentPresence,
+    autoFocus: focusStrategy,
+    triggerRef,
+    listState: () => listState,
+    keyboardDelegate: delegate,
+    triggerId,
+    valueId,
+    listboxId,
+    listboxAriaLabelledBy,
+    setListboxAriaLabelledBy,
+    setTriggerRef,
+    setContentRef,
+    setListboxRef,
+    open,
+    close,
+    toggle,
+    placeholder: () => local.placeholder,
+    renderValue,
+    renderItem,
+    renderSection,
+    generateId: createGenerateId(() => access(formControlProps.id)),
+    registerTriggerId: createRegisterId(setTriggerId),
+    registerValueId: createRegisterId(setValueId),
+    registerListboxId: createRegisterId(setListboxId),
+  };
+  return (
+    <FormControlContext.Provider value={formControlContext}>
       <SelectContext.Provider value={context}>
-        <PopperRoot anchorRef={triggerRef} contentRef={contentRef} {...popperProps}>
-          <Polymorphic fallback="div" role="group" id={access(formControlProps.id)} {...formControlContext.dataset()} {...dataset()} {...others}/>
+        <PopperRoot
+          anchorRef={triggerRef}
+          contentRef={contentRef}
+          {...popperProps}
+        >
+          <Polymorphic
+            fallback="div"
+            role="group"
+            id={access(formControlProps.id)}
+            {...formControlContext.dataset()}
+            {...dataset()}
+            {...others}
+          />
         </PopperRoot>
       </SelectContext.Provider>
-    </FormControlContext.Provider>);
+    </FormControlContext.Provider>
+  );
 }